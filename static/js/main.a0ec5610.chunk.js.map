{"version":3,"sources":["component/About.js","component/Navbar.js","component/Textarea.js","component/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["About","useState","color","backgroundColor","myStyle","setMyStyle","btntext","setBtntText","className","style","id","type","onClick","border","Navbar","props","mode","to","title","about","href","role","togglemode","htmlFor","Textarea","text","setText","heading","value","onChange","event","console","log","target","rows","newText","toUpperCase","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","split","length","Alert","alert","class","word","lower","charAt","slice","capitalize","msg","defaultProps","App","setmode","setalert","showalert","message","setTimeout","body","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.a0ec5610.chunk.js","sourcesContent":["import React,{useState} from 'react'\r\n\r\nexport default function About() {\r\n    const [myStyle, setMyStyle] = useState({\r\n        color:'black',\r\n        backgroundColor:'white'\r\n    } )\r\n    const [btntext, setBtntText] = useState('Enable Dark Mode')\r\n    let toggleStyle=()=>{\r\n        if(myStyle.color==='black'){\r\n            setMyStyle({\r\n                color:'white',\r\n                backgroundColor:'black',\r\n                border: '1px solid white'\r\n                \r\n            })\r\n            setBtntText('Enable Light Mode')\r\n        }\r\n        else{\r\n            setMyStyle({\r\n                color:'black',\r\n                backgroundColor:'white'\r\n                \r\n            })\r\n            setBtntText('Enable Dark Mode')\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\" style={myStyle}>\r\n            <h2 className=\"my-3 \">About Us</h2>\r\n            <div className=\"accordion\" id=\"accordionExample\" style={myStyle}>\r\n  <div className=\"accordion-item\">\r\n    <h2 className=\"accordion-header\" id=\"headingOne\">\r\n      <button className=\"accordion-button\" type=\"button\"style={myStyle} data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n        Accordion Item #1\r\n      </button>\r\n    </h2>\r\n    <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n      <div className=\"accordion-body\"style={myStyle}>\r\n        <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div className=\"accordion-item\">\r\n    <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n      <button className=\"accordion-button collapsed\" type=\"button\" style={myStyle} data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n        Accordion Item #2\r\n      </button>\r\n    </h2>\r\n    <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n      <div className=\"accordion-body\" style={myStyle}>\r\n        <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div className=\"accordion-item\">\r\n    <h2 className=\"accordion-header\" id=\"headingThree\">\r\n      <button className=\"accordion-button collapsed\" type=\"button\" style={myStyle} data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n        Accordion Item #3\r\n      </button>\r\n    </h2>\r\n    <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n      <div className=\"accordion-body\" style={myStyle}>\r\n        <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n<div className=\"container\">\r\n<button onClick={toggleStyle} type=\"button\" className=\"btn btn-dark my-3 mx-3\">{btntext}</button>\r\n</div>\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport {Link} from 'react-router-dom';\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n        <div className=\"container-fluid\">\r\n          <Link className=\"navbar-brand\"to=\"/\">{props.title}</Link>  \r\n          <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <Link className=\"nav-link active\" aria-current=\"page\"to=\"/\">Home</Link>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <Link className=\"nav-link\"to=\"/About\">{props.about}</Link>\r\n              </li>\r\n              <li className=\"nav-item dropdown\">\r\n                <a className=\"nav-link dropdown-toggle\"href=\"/\" id=\"navbarDropdown\" role=\"button\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\r\n                  Dropdown\r\n                </a>\r\n                <ul className=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\">\r\n                  <li><a className=\"dropdown-item\"href=\"/\">Action</a></li>\r\n                  <li><a className=\"dropdown-item\"href=\"/\">Another action</a></li>\r\n                  <li><hr className=\"dropdown-divider\"/></li>\r\n                  <li><a className=\"dropdown-item\"href=\"/\">Something else here</a></li>\r\n                </ul>\r\n              </li>\r\n              \r\n            </ul>\r\n           {/* <form className=\"d-flex\">\r\n              <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n              <button className=\"btn btn-outline-success\" type=\"submit\">Search</button> \r\n    </form> */}\r\n    <div className={`form-check form-switch text-${props.mode===\"light\"?\"dark\":\"light\"}`}>\r\n  <input className=\"form-check-input\" onClick={props.togglemode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n  <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">enable{props.mode===\"light\"?\"dark\":\"light\"} mode</label> \r\n</div>\r\n\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    ) \r\n}\r\n\r\nNavbar.defaultProps = {\r\n  title: \"Set title here\",\r\n  about: \"About here\"\r\n}","import React,{useState} from 'react'\r\n\r\n\r\nexport default function Textarea(props) {\r\n    const handleonchange = (event)=>{\r\n        console.log(\"on change function fired\");\r\n        setText(event.target.value);\r\n    }\r\n    const handleonclick = ()=>{\r\n        console.log(\"Uppercase was clicked\");\r\n        let newText=text.toUpperCase();\r\n        setText(newText);\r\n       \r\n        \r\n        \r\n\r\n    }\r\n    const handleonclickl=()=>{\r\n        let newText=text.toLowerCase();\r\n        setText(newText);\r\n      \r\n      \r\n        \r\n        \r\n    }\r\n    \r\n    \r\n    const handleonclickclr = ()=>{\r\n        console.log(\"Uppercase was clicked\");\r\n        let newText=\"\";\r\n        setText(newText);\r\n       \r\n    }\r\n    const handleCopy=()=>{\r\n        let newText=document.getElementById(\"MyBox\");\r\n        newText.select();\r\n        navigator.clipboard.writeText(newText.value);\r\n       \r\n        \r\n    }\r\n    const[text, setText]=useState('Enter text here');\r\n\r\n    return (\r\n        <>\r\n        <div>\r\n            \r\n\r\n<div className=\"mb-3\" style={{color: props.mode===\"dark\"?\"white\":\"rgb(3 10 40)\"}} >\r\n<h1>{props.heading}</h1>\r\n  <label htmlFor=\"textarea\" className=\"form-label\">Example textarea</label>\r\n  <textarea className=\"form-control\" id=\"MyBox\" value={text} onChange={handleonchange} style={{backgroundColor: props.mode===\"dark\"?\"grey\":\"white\",color:props.mode===\"dark\"?\"white\":\"rgb(3 10 40)\"}} rows=\"8\"></textarea>\r\n  \r\n</div>\r\n<button className=\"btn btn-primary mx-2\" onClick={handleonclick}>Convert to uppercase</button>\r\n<button className=\"btn btn-primary mx-2\" onClick={handleonclickl}>Convert to uppercase</button>\r\n\r\n<button className=\"btn btn-primary mx-2\" onClick={handleonclickclr}>Clear Text</button>\r\n<button className=\"btn btn-primary mx-2\" onClick={handleCopy}>Copy Text</button>\r\n\r\n        </div>\r\n        \r\n        <div className=\"container my-4\"style={{color: props.mode===\"dark\"?\"white\":\"rgb(3 10 40)\"}} >\r\n            <h2>Your Text Summary</h2>\r\n            <p>{text.split(\" \").length} words and {text.length} Character</p>\r\n            <p>{0.008 * text.length} Minute read </p>\r\n            <h3>Preview</h3>\r\n            <hr/>\r\n            <p>{text.length>0?text:\"Enter something in the textbox above to preview it here\"}</p>\r\n            <hr/>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    const capitalize=(word)=>{\r\n        const lower=word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n        props.alert && <div class={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n  <strong>{capitalize(props.alert.type)}</strong>:{props.alert.msg}\r\n  \r\n</div>\r\n    )\r\n}\r\n","\nimport './App.css';\nimport About from './component/About';\nimport Navbar from './component/Navbar';\nimport Textarea from './component/Textarea';\nimport React, { useState } from 'react';\nimport Alert from './component/Alert';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n// hii\n\n\n\n\nfunction App() { \n  const [mode, setmode] = useState('light');\n  const [alert, setalert] = useState(null);\n  const showalert=(message,type)=>{\n    setalert({\n    msg: message,\n    type: type\n    })\n    setTimeout(() => {\n      setalert(null);\n       }, 1500);\n  }\n\n  const togglemode=()=>{\n    if(mode==='light'){\n      setmode('dark');\n      document.body.style.backgroundColor='rgb(3 10 40)';\n      showalert(\"Dark Mode has been enabled\",\"Success\");\n      document.title='Texters-DarkMode';\n    }\n    else{\n      setmode('light');\n      document.body.style.backgroundColor='white';\n      showalert(\"Light Mode has been enabled\",\"Success\");\n      document.title='Texters-LightMode';\n    }\n  }\n\n  return (\n    <>\n    <Router>\n <Navbar title=\"Texters\" about=\" About US\" mode={mode} togglemode={togglemode}/>\n   <Alert alert={alert}/>\n   <div className=\"container my-3\"> \n   <Switch>\n          <Route path=\"/about\">\n            <About />\n          </Route>\n         \n          <Route path=\"/\">\n          <Textarea showalert={showalert} heading=\"New heading\"  mode={mode}/>\n            \n          </Route>\n          <Route path=\"/\">\n            <About/>\n          </Route>\n        </Switch>\n        \n     </div> \n     </Router>\n     \n    \n\n\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}